{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL.000\\\\Desktop\\\\core4\\\\core4\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Tabs from \"./components/Tabs\";\nimport TransformerList from \"./components/TransformerList\";\nimport TransformerModal from \"./components/TransformerModal\";\nimport InspectionList from \"./components/InspectionList\";\nimport InspectionModal from \"./components/InspectionModal\";\nimport InspectionViewModal from \"./components/InspectionViewModal\";\nimport TransformerInspectionsPage from \"./components/TransformerInspectionsPage\";\nimport SettingsPage from \"./components/SettingsPage\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8000/api\";\nfunction App() {\n  _s();\n  const [activePage, setActivePage] = useState(\"page1\");\n  const [activeTab, setActiveTab] = useState(\"details\");\n  const [transformers, setTransformers] = useState([]);\n  const [filteredTransformers, setFilteredTransformers] = useState([]);\n  const [selectedTransformer, setSelectedTransformer] = useState(null);\n  const [showTransformerModal, setShowTransformerModal] = useState(false);\n  const [transformerForm, setTransformerForm] = useState({\n    id: null,\n    number: \"\",\n    pole: \"\",\n    region: \"\",\n    type: \"Bulk\",\n    baselineImage: null,\n    baselineUploadDate: null,\n    weather: \"\",\n    location: \"\"\n  });\n  const [searchFieldDetails, setSearchFieldDetails] = useState(\"number\");\n  const [searchQueryDetails, setSearchQueryDetails] = useState(\"\");\n  const [inspections, setInspections] = useState([]);\n  const [filteredInspections, setFilteredInspections] = useState([]);\n  const [showAddInspectionModal, setShowAddInspectionModal] = useState(false);\n  const [showViewInspectionModal, setShowViewInspectionModal] = useState(false);\n  const [viewInspectionData, setViewInspectionData] = useState(null);\n  const [inspectionForm, setInspectionForm] = useState({\n    transformer: \"\",\n    date: \"\",\n    inspector: \"\",\n    notes: \"\",\n    maintenanceImage: null,\n    maintenanceUploadDate: null,\n    maintenanceWeather: \"Sunny\"\n  });\n  const [searchFieldInspection, setSearchFieldInspection] = useState(\"\");\n  const [searchQueryInspection, setSearchQueryInspection] = useState(\"\");\n  const [showTransformerInspectionsPage, setShowTransformerInspectionsPage] = useState(false);\n  const [selectedTransformerForPage, setSelectedTransformerForPage] = useState(null);\n\n  // --- Load all data from backend on startup ---\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [transformersRes, inspectionsRes] = await Promise.all([fetch(`${API_URL}/transformers`), fetch(`${API_URL}/inspections`)]);\n        const transformersData = await transformersRes.json();\n        const inspectionsData = await inspectionsRes.json();\n        setTransformers(transformersData);\n        setInspections(inspectionsData);\n      } catch (error) {\n        console.error(\"Failed to fetch data from backend:\", error);\n        alert(\"Could not connect to the backend. Please ensure it is running.\");\n      }\n    };\n    fetchData();\n  }, []);\n\n  // --- Filtering ---\n  useEffect(() => {\n    setFilteredTransformers(transformers.filter(t => {\n      var _t$searchFieldDetails;\n      if (!searchQueryDetails) return true;\n      const value = ((_t$searchFieldDetails = t[searchFieldDetails]) === null || _t$searchFieldDetails === void 0 ? void 0 : _t$searchFieldDetails.toString().toLowerCase()) || \"\";\n      return value.includes(searchQueryDetails.toLowerCase());\n    }));\n  }, [searchQueryDetails, searchFieldDetails, transformers]);\n  useEffect(() => {\n    setFilteredInspections(inspections.filter(i => {\n      var _transformers$find, _transformers$find$nu, _i$searchFieldInspect;\n      if (!searchQueryInspection) return true;\n      const value = searchFieldInspection === \"transformer\" ? ((_transformers$find = transformers.find(t => t.id === i.transformer)) === null || _transformers$find === void 0 ? void 0 : (_transformers$find$nu = _transformers$find.number) === null || _transformers$find$nu === void 0 ? void 0 : _transformers$find$nu.toString().toLowerCase()) || \"\" : ((_i$searchFieldInspect = i[searchFieldInspection]) === null || _i$searchFieldInspect === void 0 ? void 0 : _i$searchFieldInspect.toString().toLowerCase()) || \"\";\n      return value.includes(searchQueryInspection.toLowerCase());\n    }));\n  }, [searchQueryInspection, searchFieldInspection, inspections, transformers]);\n\n  // --- Transformer handlers ---\n  const handleTransformerChange = e => {\n    const {\n      name,\n      value,\n      files\n    } = e.target;\n    if (name === \"baselineImage\" && files !== null && files !== void 0 && files[0]) {\n      const reader = new FileReader();\n      reader.onloadend = () => setTransformerForm({\n        ...transformerForm,\n        baselineImage: reader.result,\n        baselineUploadDate: new Date().toLocaleString()\n      });\n      reader.readAsDataURL(files[0]);\n    } else {\n      setTransformerForm({\n        ...transformerForm,\n        [name]: value\n      });\n    }\n  };\n  const openTransformerModal = (t = null) => {\n    if (t) setTransformerForm({\n      ...t\n    });else setTransformerForm({\n      id: null,\n      number: \"\",\n      pole: \"\",\n      region: \"\",\n      type: \"Bulk\",\n      baselineImage: null,\n      baselineUploadDate: null,\n      weather: \"\",\n      location: \"\"\n    });\n    setShowTransformerModal(true);\n  };\n  const handleAddTransformer = async () => {\n    try {\n      const response = await fetch(`${API_URL}/transformers`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(transformerForm)\n      });\n      const savedTransformer = await response.json();\n      setTransformers(prev => {\n        const exists = prev.some(t => t.id === savedTransformer.id);\n        if (exists) {\n          return prev.map(t => t.id === savedTransformer.id ? savedTransformer : t);\n        } else {\n          return [...prev, savedTransformer];\n        }\n      });\n      setShowTransformerModal(false);\n    } catch (error) {\n      console.error(\"Failed to save transformer:\", error);\n    }\n  };\n  const handleDeleteTransformer = async transformerId => {\n    try {\n      const response = await fetch(`${API_URL}/transformers/${transformerId}`, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        setTransformers(prev => prev.filter(t => t.id !== transformerId));\n      }\n    } catch (error) {\n      console.error(\"Failed to delete transformer:\", error);\n    }\n  };\n\n  // --- Inspection handlers ---\n  const handleInspectionChange = e => {\n    setInspectionForm({\n      ...inspectionForm,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleScheduleInspection = async () => {\n    if (!inspectionForm.transformer || !inspectionForm.date || !inspectionForm.inspector) {\n      alert(\"Please select a transformer, and fill in both the Date and Inspector fields.\");\n      return;\n    }\n    const transformerId = parseInt(inspectionForm.transformer, 10);\n    const newInspectionData = {\n      ...inspectionForm,\n      transformer: transformerId,\n      progressStatus: {\n        thermalUpload: \"Pending\",\n        aiAnalysis: \"Pending\",\n        review: \"Pending\"\n      }\n    };\n    try {\n      const response = await fetch(`${API_URL}/inspections`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newInspectionData)\n      });\n      const savedInspection = await response.json();\n      setInspections(prev => [...prev, savedInspection]);\n      setShowAddInspectionModal(false);\n      setInspectionForm({\n        transformer: \"\",\n        date: \"\",\n        inspector: \"\",\n        notes: \"\",\n        maintenanceImage: null,\n        maintenanceUploadDate: null,\n        maintenanceWeather: \"Sunny\"\n      });\n    } catch (error) {\n      console.error(\"Failed to schedule inspection:\", error);\n    }\n  };\n  const handleDeleteInspection = async inspectionId => {\n    try {\n      const response = await fetch(`${API_URL}/inspections/${inspectionId}`, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        setInspections(prev => prev.filter(i => i.id !== inspectionId));\n      }\n    } catch (error) {\n      console.error(\"Failed to delete inspection:\", error);\n    }\n  };\n  const handleViewInspection = inspection => {\n    setViewInspectionData(inspection);\n    setShowViewInspectionModal(true);\n  };\n  const handleUpdateInspection = async updatedInspection => {\n    await fetch(`${API_URL}/inspections/${updatedInspection.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedInspection)\n    });\n    setInspections(inspections.map(i => i.id === updatedInspection.id ? updatedInspection : i));\n  };\n  const handleUpdateTransformer = async updatedTransformer => {\n    await fetch(`${API_URL}/transformers`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedTransformer)\n    });\n    setTransformers(prev => prev.map(t => t.id === updatedTransformer.id ? updatedTransformer : t));\n  };\n\n  // --- Full-page inspection handlers ---\n  const handleOpenTransformerInspectionsPage = transformer => {\n    setSelectedTransformerForPage(transformer);\n    setShowTransformerInspectionsPage(true);\n  };\n  const handleBackToMain = () => {\n    setSelectedTransformerForPage(null);\n    setShowTransformerInspectionsPage(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      setActivePage: setActivePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: activePage === \"page2\" ? /*#__PURE__*/_jsxDEV(SettingsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this) : showTransformerInspectionsPage && selectedTransformerForPage ? /*#__PURE__*/_jsxDEV(TransformerInspectionsPage, {\n        transformer: selectedTransformerForPage,\n        inspections: inspections.filter(i => i.transformer === selectedTransformerForPage.id),\n        setInspections: setInspections,\n        setFilteredInspections: setFilteredInspections,\n        transformers: transformers,\n        onBack: handleBackToMain,\n        onViewInspection: handleViewInspection,\n        deleteInspection: handleDeleteInspection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Tabs, {\n          activeTab: activeTab,\n          setActiveTab: setActiveTab\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), activeTab === \"details\" && /*#__PURE__*/_jsxDEV(TransformerList, {\n          transformers: transformers,\n          filteredTransformers: filteredTransformers,\n          setTransformers: setTransformers,\n          deleteTransformer: handleDeleteTransformer,\n          selectedTransformer: selectedTransformer,\n          setSelectedTransformer: setSelectedTransformer,\n          searchFieldDetails: searchFieldDetails,\n          setSearchFieldDetails: setSearchFieldDetails,\n          searchQueryDetails: searchQueryDetails,\n          setSearchQueryDetails: setSearchQueryDetails,\n          setShowModal: openTransformerModal,\n          onViewInspections: handleOpenTransformerInspectionsPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 15\n        }, this), activeTab === \"inspection\" && /*#__PURE__*/_jsxDEV(InspectionList, {\n          filteredInspections: filteredInspections,\n          transformers: transformers,\n          inspections: inspections,\n          setInspections: setInspections,\n          setFilteredInspections: setFilteredInspections,\n          searchFieldInspection: searchFieldInspection,\n          setSearchFieldInspection: setSearchFieldInspection,\n          searchQueryInspection: searchQueryInspection,\n          setSearchQueryInspection: setSearchQueryInspection,\n          openAddInspectionModal: () => setShowAddInspectionModal(true),\n          onViewInspections: handleOpenTransformerInspectionsPage,\n          deleteInspection: handleDeleteInspection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), showTransformerModal && /*#__PURE__*/_jsxDEV(TransformerModal, {\n      formData: transformerForm,\n      handleInputChange: handleTransformerChange,\n      handleAddTransformer: handleAddTransformer,\n      onClose: () => setShowTransformerModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }, this), showAddInspectionModal && !showTransformerInspectionsPage && /*#__PURE__*/_jsxDEV(InspectionModal, {\n      transformers: transformers,\n      inspectionForm: inspectionForm,\n      handleInspectionChange: handleInspectionChange,\n      handleScheduleInspection: handleScheduleInspection,\n      onClose: () => setShowAddInspectionModal(false),\n      disableTransformerSelect: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this), showViewInspectionModal && viewInspectionData && /*#__PURE__*/_jsxDEV(InspectionViewModal, {\n      inspection: viewInspectionData,\n      transformers: transformers,\n      onClose: () => setShowViewInspectionModal(false),\n      updateInspection: handleUpdateInspection,\n      updateTransformer: handleUpdateTransformer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mWj0D48ZWf0h+npkcj0VFed+ZXs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","Tabs","TransformerList","TransformerModal","InspectionList","InspectionModal","InspectionViewModal","TransformerInspectionsPage","SettingsPage","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","App","_s","activePage","setActivePage","activeTab","setActiveTab","transformers","setTransformers","filteredTransformers","setFilteredTransformers","selectedTransformer","setSelectedTransformer","showTransformerModal","setShowTransformerModal","transformerForm","setTransformerForm","id","number","pole","region","type","baselineImage","baselineUploadDate","weather","location","searchFieldDetails","setSearchFieldDetails","searchQueryDetails","setSearchQueryDetails","inspections","setInspections","filteredInspections","setFilteredInspections","showAddInspectionModal","setShowAddInspectionModal","showViewInspectionModal","setShowViewInspectionModal","viewInspectionData","setViewInspectionData","inspectionForm","setInspectionForm","transformer","date","inspector","notes","maintenanceImage","maintenanceUploadDate","maintenanceWeather","searchFieldInspection","setSearchFieldInspection","searchQueryInspection","setSearchQueryInspection","showTransformerInspectionsPage","setShowTransformerInspectionsPage","selectedTransformerForPage","setSelectedTransformerForPage","fetchData","transformersRes","inspectionsRes","Promise","all","fetch","transformersData","json","inspectionsData","error","console","alert","filter","t","_t$searchFieldDetails","value","toString","toLowerCase","includes","i","_transformers$find","_transformers$find$nu","_i$searchFieldInspect","find","handleTransformerChange","e","name","files","target","reader","FileReader","onloadend","result","Date","toLocaleString","readAsDataURL","openTransformerModal","handleAddTransformer","response","method","headers","body","JSON","stringify","savedTransformer","prev","exists","some","map","handleDeleteTransformer","transformerId","ok","handleInspectionChange","handleScheduleInspection","parseInt","newInspectionData","progressStatus","thermalUpload","aiAnalysis","review","savedInspection","handleDeleteInspection","inspectionId","handleViewInspection","inspection","handleUpdateInspection","updatedInspection","handleUpdateTransformer","updatedTransformer","handleOpenTransformerInspectionsPage","handleBackToMain","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onBack","onViewInspection","deleteInspection","deleteTransformer","setShowModal","onViewInspections","openAddInspectionModal","formData","handleInputChange","onClose","disableTransformerSelect","updateInspection","updateTransformer","_c","$RefreshReg$"],"sources":["C:/Users/DELL.000/Desktop/core4/core4/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Tabs from \"./components/Tabs\";\r\nimport TransformerList from \"./components/TransformerList\"; import TransformerModal from \"./components/TransformerModal\"; import InspectionList from \"./components/InspectionList\"; import InspectionModal from \"./components/InspectionModal\"; import InspectionViewModal from \"./components/InspectionViewModal\"; import TransformerInspectionsPage from \"./components/TransformerInspectionsPage\";\r\nimport SettingsPage from \"./components/SettingsPage\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst API_URL = \"http://localhost:8000/api\";\r\n\r\nfunction App() {\r\n  const [activePage, setActivePage] = useState(\"page1\");\r\n  const [activeTab, setActiveTab] = useState(\"details\");\r\n\r\n  const [transformers, setTransformers] = useState([]);\r\n  const [filteredTransformers, setFilteredTransformers] = useState([]);\r\n  const [selectedTransformer, setSelectedTransformer] = useState(null);\r\n  const [showTransformerModal, setShowTransformerModal] = useState(false);\r\n  const [transformerForm, setTransformerForm] = useState({\r\n    id: null,\r\n    number: \"\",\r\n    pole: \"\",\r\n    region: \"\",\r\n    type: \"Bulk\",\r\n    baselineImage: null,\r\n    baselineUploadDate: null,\r\n    weather: \"\",\r\n    location: \"\",\r\n  });\r\n  const [searchFieldDetails, setSearchFieldDetails] = useState(\"number\");\r\n  const [searchQueryDetails, setSearchQueryDetails] = useState(\"\");\r\n\r\n  const [inspections, setInspections] = useState([]);\r\n  const [filteredInspections, setFilteredInspections] = useState([]);\r\n  const [showAddInspectionModal, setShowAddInspectionModal] = useState(false);\r\n  const [showViewInspectionModal, setShowViewInspectionModal] = useState(false);\r\n  const [viewInspectionData, setViewInspectionData] = useState(null);\r\n  const [inspectionForm, setInspectionForm] = useState({\r\n    transformer: \"\",\r\n    date: \"\",\r\n    inspector: \"\",\r\n    notes: \"\",\r\n    maintenanceImage: null,\r\n    maintenanceUploadDate: null,\r\n    maintenanceWeather: \"Sunny\",\r\n  });\r\n  const [searchFieldInspection, setSearchFieldInspection] = useState(\"\");\r\n  const [searchQueryInspection, setSearchQueryInspection] = useState(\"\");\r\n\r\n  const [showTransformerInspectionsPage, setShowTransformerInspectionsPage] = useState(false);\r\n  const [selectedTransformerForPage, setSelectedTransformerForPage] = useState(null);\r\n\r\n  // --- Load all data from backend on startup ---\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const [transformersRes, inspectionsRes] = await Promise.all([\r\n          fetch(`${API_URL}/transformers`),\r\n          fetch(`${API_URL}/inspections`),\r\n        ]);\r\n        const transformersData = await transformersRes.json();\r\n        const inspectionsData = await inspectionsRes.json();\r\n        setTransformers(transformersData);\r\n        setInspections(inspectionsData);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch data from backend:\", error);\r\n        alert(\"Could not connect to the backend. Please ensure it is running.\");\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  // --- Filtering ---\r\n  useEffect(() => {\r\n    setFilteredTransformers(\r\n      transformers.filter(t => {\r\n        if (!searchQueryDetails) return true;\r\n        const value = t[searchFieldDetails]?.toString().toLowerCase() || \"\";\r\n        return value.includes(searchQueryDetails.toLowerCase());\r\n      })\r\n    );\r\n  }, [searchQueryDetails, searchFieldDetails, transformers]);\r\n\r\n  useEffect(() => {\r\n    setFilteredInspections(\r\n      inspections.filter(i => {\r\n        if (!searchQueryInspection) return true;\r\n        const value =\r\n          searchFieldInspection === \"transformer\"\r\n            ? transformers.find(t => t.id === i.transformer)?.number?.toString().toLowerCase() || \"\"\r\n            : i[searchFieldInspection]?.toString().toLowerCase() || \"\";\r\n        return value.includes(searchQueryInspection.toLowerCase());\r\n      })\r\n    );\r\n  }, [searchQueryInspection, searchFieldInspection, inspections, transformers]);\r\n\r\n  // --- Transformer handlers ---\r\n  const handleTransformerChange = (e) => {\r\n    const { name, value, files } = e.target;\r\n    if (name === \"baselineImage\" && files?.[0]) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => setTransformerForm({\r\n        ...transformerForm,\r\n        baselineImage: reader.result,\r\n        baselineUploadDate: new Date().toLocaleString(),\r\n      });\r\n      reader.readAsDataURL(files[0]);\r\n    } else { setTransformerForm({ ...transformerForm, [name]: value }); }\r\n  };\r\n\r\n  const openTransformerModal = (t = null) => {\r\n    if (t) setTransformerForm({ ...t });\r\n    else setTransformerForm({ id: null, number: \"\", pole: \"\", region: \"\", type: \"Bulk\", baselineImage: null, baselineUploadDate: null, weather: \"\", location: \"\" });\r\n    setShowTransformerModal(true);\r\n  };\r\n\r\n  const handleAddTransformer = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/transformers`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(transformerForm),\r\n      });\r\n      const savedTransformer = await response.json();\r\n      setTransformers(prev => {\r\n        const exists = prev.some(t => t.id === savedTransformer.id);\r\n        if (exists) {\r\n          return prev.map(t => t.id === savedTransformer.id ? savedTransformer : t);\r\n        } else {\r\n          return [...prev, savedTransformer];\r\n        }\r\n      });\r\n      setShowTransformerModal(false);\r\n    } catch (error) {\r\n      console.error(\"Failed to save transformer:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteTransformer = async (transformerId) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/transformers/${transformerId}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      if (response.ok) {\r\n        setTransformers(prev => prev.filter(t => t.id !== transformerId));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to delete transformer:\", error);\r\n    }\r\n  };\r\n\r\n  // --- Inspection handlers ---\r\n  const handleInspectionChange = (e) => { setInspectionForm({ ...inspectionForm, [e.target.name]: e.target.value }); };\r\n\r\n  const handleScheduleInspection = async () => {\r\n    if (!inspectionForm.transformer || !inspectionForm.date || !inspectionForm.inspector) {\r\n      alert(\"Please select a transformer, and fill in both the Date and Inspector fields.\");\r\n      return;\r\n    }\r\n\r\n    const transformerId = parseInt(inspectionForm.transformer, 10);\r\n    const newInspectionData = {\r\n      ...inspectionForm,\r\n      transformer: transformerId,\r\n      progressStatus: { thermalUpload: \"Pending\", aiAnalysis: \"Pending\", review: \"Pending\" },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`${API_URL}/inspections`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(newInspectionData),\r\n      });\r\n      const savedInspection = await response.json();\r\n      setInspections(prev => [...prev, savedInspection]);\r\n      setShowAddInspectionModal(false);\r\n      setInspectionForm({ transformer: \"\", date: \"\", inspector: \"\", notes: \"\", maintenanceImage: null, maintenanceUploadDate: null, maintenanceWeather: \"Sunny\" });\r\n    } catch (error) {\r\n      console.error(\"Failed to schedule inspection:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteInspection = async (inspectionId) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/inspections/${inspectionId}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      if (response.ok) {\r\n        setInspections(prev => prev.filter(i => i.id !== inspectionId));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to delete inspection:\", error);\r\n    }\r\n  };\r\n\r\n  const handleViewInspection = (inspection) => { setViewInspectionData(inspection); setShowViewInspectionModal(true); };\r\n  const handleUpdateInspection = async (updatedInspection) => {\r\n    await fetch(`${API_URL}/inspections/${updatedInspection.id}`, { method: \"PUT\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(updatedInspection) });\r\n    setInspections(inspections.map(i => (i.id === updatedInspection.id ? updatedInspection : i)));\r\n  };\r\n  const handleUpdateTransformer = async (updatedTransformer) => {\r\n    await fetch(`${API_URL}/transformers`, { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(updatedTransformer) });\r\n    setTransformers(prev => prev.map(t => (t.id === updatedTransformer.id ? updatedTransformer : t)));\r\n  };\r\n\r\n  // --- Full-page inspection handlers ---\r\n  const handleOpenTransformerInspectionsPage = (transformer) => { setSelectedTransformerForPage(transformer); setShowTransformerInspectionsPage(true); };\r\n  const handleBackToMain = () => { setSelectedTransformerForPage(null); setShowTransformerInspectionsPage(false); };\r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      <Sidebar setActivePage={setActivePage} />\r\n      <div className=\"content\">\r\n        {activePage === \"page2\" ? (\r\n          <SettingsPage />\r\n        ) : showTransformerInspectionsPage && selectedTransformerForPage ? (\r\n          <TransformerInspectionsPage\r\n            transformer={selectedTransformerForPage}\r\n            inspections={inspections.filter(i => i.transformer === selectedTransformerForPage.id)}\r\n            setInspections={setInspections}\r\n            setFilteredInspections={setFilteredInspections}\r\n            transformers={transformers}\r\n            onBack={handleBackToMain}\r\n            onViewInspection={handleViewInspection}\r\n            deleteInspection={handleDeleteInspection}\r\n          />\r\n        ) : (\r\n          <>\r\n            <Tabs activeTab={activeTab} setActiveTab={setActiveTab} />\r\n            {activeTab === \"details\" && (\r\n              <TransformerList\r\n                transformers={transformers}\r\n                filteredTransformers={filteredTransformers}\r\n                setTransformers={setTransformers}\r\n                deleteTransformer={handleDeleteTransformer}\r\n                selectedTransformer={selectedTransformer}\r\n                setSelectedTransformer={setSelectedTransformer}\r\n                searchFieldDetails={searchFieldDetails}\r\n                setSearchFieldDetails={setSearchFieldDetails}\r\n                searchQueryDetails={searchQueryDetails}\r\n                setSearchQueryDetails={setSearchQueryDetails}\r\n                setShowModal={openTransformerModal}\r\n                onViewInspections={handleOpenTransformerInspectionsPage}\r\n              />\r\n            )}\r\n            {activeTab === \"inspection\" && (\r\n              <InspectionList\r\n                filteredInspections={filteredInspections}\r\n                transformers={transformers}\r\n                inspections={inspections}\r\n                setInspections={setInspections}\r\n                setFilteredInspections={setFilteredInspections}\r\n                searchFieldInspection={searchFieldInspection}\r\n                setSearchFieldInspection={setSearchFieldInspection}\r\n                searchQueryInspection={searchQueryInspection}\r\n                setSearchQueryInspection={setSearchQueryInspection}\r\n                openAddInspectionModal={() => setShowAddInspectionModal(true)}\r\n                onViewInspections={handleOpenTransformerInspectionsPage}\r\n                deleteInspection={handleDeleteInspection}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {showTransformerModal && (\r\n        <TransformerModal\r\n          formData={transformerForm}\r\n          handleInputChange={handleTransformerChange}\r\n          handleAddTransformer={handleAddTransformer}\r\n          onClose={() => setShowTransformerModal(false)}\r\n        />\r\n      )}\r\n\r\n      {showAddInspectionModal && !showTransformerInspectionsPage && (\r\n        <InspectionModal\r\n          transformers={transformers}\r\n          inspectionForm={inspectionForm}\r\n          handleInspectionChange={handleInspectionChange}\r\n          handleScheduleInspection={handleScheduleInspection}\r\n          onClose={() => setShowAddInspectionModal(false)}\r\n          disableTransformerSelect={false}\r\n        />\r\n      )}\r\n\r\n      {showViewInspectionModal && viewInspectionData && (\r\n        <InspectionViewModal\r\n          inspection={viewInspectionData}\r\n          transformers={transformers}\r\n          onClose={() => setShowViewInspectionModal(false)}\r\n          updateInspection={handleUpdateInspection}\r\n          updateTransformer={handleUpdateTransformer}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}